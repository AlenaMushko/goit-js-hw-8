{"mappings":"mkBAAA,aACAA,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyBC,EAAKC,EAAKH,GAC3BG,KAAOD,EACPN,OAAOC,eAAeK,EAAKC,EAAK,CAC5BH,MAAOA,EACPI,YAAY,EACZC,cAAc,EACdC,UAAU,IAGdJ,EAAIC,GAAOH,EAEf,OAAOE,C,cCfXN,OAAOC,eAAeU,EAAS,aAAc,CACzCP,OAAO,IAEXO,EAAQN,QAER,SAAuBO,GACnB,IAAI,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAI,CACrC,IAAIG,EAAyB,MAAhBF,UAAUD,GAAaC,UAAUD,GAAK,GAC/CI,EAAUjB,OAAOkB,KAAKF,GACkB,mBAAjChB,OAAOmB,wBACdF,EAAUA,EAAQG,OAAOpB,OAAOmB,sBAAsBH,GAAQK,QAAO,SAASC,GAC1E,OAAOtB,OAAOuB,yBAAyBP,EAAQM,GAAKd,U,MAG5DS,EAAQO,SAAQ,SAASjB,GACrBkB,EAAqBpB,QAAQO,EAAQL,EAAKS,EAAOT,G,IAGzD,OAAOK,C,EAdX,IAgBgCN,EAhB5BmB,GAgB4BnB,EAhBaoB,EAAA,WAiB3BpB,EAAIqB,WAAarB,EAAM,CACjCD,QAASC,GCTjB,IAAMsB,EAAeC,SAASC,cAAc,YACtCC,EAAUF,SAASC,cAAc,cACjCE,EAAcH,SAASC,cAAc,cAE3CF,EAAaK,iBAAiB,WAAW,SAAAC,GAEvC,GAAa,UAAVA,EAAE3B,IAAL,CAEA,IAAI4B,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,aAEtCJ,IACHA,EAAO,IAGTA,EAAKK,KAAK,CACRpC,MAAO8B,EAAEtB,OAAOR,MAChBqC,MAAO,YAGT,IAAMC,EAAWN,KAAKO,UAAUR,GAGhCG,aAAaM,QAAQ,WAAYF,GACjCR,EAAEtB,OAAOR,MAAQ,GAEjByC,GAnBsB,C,IAsBxBb,EAAYC,iBAAiB,SAAS,SAAAC,GACpCI,aAAaM,QAAQ,WAAY,MACjCC,G,IAGFd,EAAQE,iBAAiB,SAAS,SAAAC,GACN,eAAvBA,EAAEtB,OAAOkC,WACVC,EAAWb,EAAEtB,OAAOoC,QAAQC,QAGJ,gBAAvBf,EAAEtB,OAAOkC,WACVI,EAAahB,EAAEtB,OAAOoC,QAAQC,O,IAIlC,IAAMJ,EAAiB,WACrB,IAAMM,EAAWf,KAAKC,MAAMC,aAAaC,QAAQ,aACjDR,EAAQqB,UAAY,GAEpBD,EAAS3B,SAAQ,SAAA6B,EAAiBC,G,IAAflD,EAAKiD,EAALjD,MAAOqC,EAAKY,EAALZ,MACxBV,EAAQwB,mBAAmB,YAAa,sDAEbnC,OAAVqB,EAAM,MACkCrB,OAD9BhB,EAAM,wEAEuBgB,OADCkC,EAAM,gFACDlC,OAANkC,EAAM,iC,KAwB5DP,EAAa,SAACS,GAElB,IAAMrB,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,aAC7CJ,EAAKsB,OAAOD,EAAI,GAEhBlB,aAAaM,QAAQ,WAAYR,KAAKO,UAAUR,IAChDU,G,EAIIK,EAAe,SAACM,GACpB,IAAMrB,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,aAE7CJ,EAAKqB,GAAME,EAAA/C,EAAA,IACNwB,EAAKqB,GAAG,CACXf,MAAO,SAGTH,aAAaM,QAAQ,WAAYR,KAAKO,UAAUR,IAChDU,G,EAGFA,G","sources":["node_modules/@swc/helpers/lib/_define_property.js","node_modules/@swc/helpers/lib/_object_spread.js","src/js/04-todo.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _objectSpread;\nvar _defineProperty = _interopRequireDefault(require(\"./_define_property\"));\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            (0, _defineProperty).default(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","//         Створити ToDo List\n// Має бути поле ввода нового завдання\n// має бути список створених завдань\n// Завдання можна позначити як виконане\n// завдання можна видалити\n//              Алгоритм\n// Зверстати форму для ввода нового завдання (інпут)\n// Зверстати список завдань (текстове значення, кнопка видалення, кнопка виконання)\n// Повішати подію нажаття на ентер в полі вводу завдання\n// Записати нове завдання в локал сторідж по кліку на ентер в полі вводу\n// оновити список завдань в HTML\n// по кліку на кнопку виконано, закреслити завдання\n// по кліку на кнопку видалити, видалити завдання\n\nconst taskInputRef = document.querySelector('#newTask');\nconst listRef = document.querySelector('.todo-list');\nconst clearBtnRef = document.querySelector('#clearList');\n\ntaskInputRef.addEventListener('keydown', e => {\n\n  if(e.key !== 'Enter') return\n\n  let data = JSON.parse(localStorage.getItem('todoList'));\n\n  if (!data) {\n    data = []\n  }\n\n  data.push({\n    value: e.target.value,\n    state: 'pending'\n  });\n\n  const jsonData = JSON.stringify(data);\n  \n\n  localStorage.setItem('todoList', jsonData);\n  e.target.value = '';\n\n  updateToDoList()\n});\n\nclearBtnRef.addEventListener('click', e => {\n  localStorage.setItem('todoList', '[]');\n  updateToDoList()\n});\n\nlistRef.addEventListener('click', e => {\n  if(e.target.className === 'deleteTask') {\n    deleteTask(e.target.dataset.taskid)\n  }\n\n  if(e.target.className === 'confirmTask') {\n    completeTask(e.target.dataset.taskid)\n  }\n})\n\nconst updateToDoList = () => {\n  const todoList = JSON.parse(localStorage.getItem('todoList'));\n  listRef.innerHTML = '';\n\n  todoList.forEach(({value, state}, index) => {\n    listRef.insertAdjacentHTML('beforeend', `\n      <li class=\"task-item\">\n      <span class=\"${state}\">${value}</span>\n      <input type=\"button\" class=\"confirmTask\" data-taskId=${index} value=\"готово\">\n      <input type=\"button\" class=\"deleteTask\" data-taskId=${index} value=\"видалити\">\n    </li>`)\n\n    // const li = document.createElement('li');\n    // const span = document.createElement('span');\n    // const btnConfirm = document.createElement('button');\n    // const btnRemove = document.createElement('button');\n\n    // btnConfirm.textContent = 'Done';\n    // btnConfirm.id = 'confirmTask';\n    \n    // btnRemove.textContent = 'Remove';\n    // btnRemove.id = 'removeTask';\n    \n    // span.textContent = task;\n\n    // li.append(span)\n    // li.append(btnConfirm)\n    // li.append(btnRemove);\n\n    // listRef.append(li);\n  })\n}\n\nconst deleteTask = (id) => {\n  \n  const data = JSON.parse(localStorage.getItem('todoList'));\n  data.splice(id, 1);\n  \n  localStorage.setItem('todoList', JSON.stringify(data))\n  updateToDoList()\n}\n\n\nconst completeTask = (id) => {\n  const data = JSON.parse(localStorage.getItem('todoList'));\n\n  data[id] = {\n    ...data[id],\n    state: 'done'\n  }\n\n  localStorage.setItem('todoList', JSON.stringify(data))\n  updateToDoList()\n\n}\nupdateToDoList()"],"names":["Object","defineProperty","module","exports","value","default","obj","key","enumerable","configurable","writable","$9eddae5a012cde57$exports","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","forEach","$9eddae5a012cde57$var$_defineProperty","parcelRequire","__esModule","$9c29793379dd68cf$var$taskInputRef","document","querySelector","$9c29793379dd68cf$var$listRef","$9c29793379dd68cf$var$clearBtnRef","addEventListener","e","data","JSON","parse","localStorage","getItem","push","state","jsonData","stringify","setItem","$9c29793379dd68cf$var$updateToDoList","className","$9c29793379dd68cf$var$deleteTask","dataset","taskid","$9c29793379dd68cf$var$completeTask","todoList","innerHTML","param","index","insertAdjacentHTML","id","splice","$parcel$interopDefault"],"version":3,"file":"04-todo.be38375d.js.map"}